#!/usr/bin/env node

/**
 * üõ°Ô∏è SCRIPT DE VERIFICACI√ìN PRE-PUSH
 * Este script evita que subas c√≥digo roto a producci√≥n
 * Se ejecuta autom√°ticamente antes de cada push
 */

const { execSync } = require('child_process');
const readline = require('readline');
const fs = require('fs');
const path = require('path');

// Colores para la consola
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// Interfaz para preguntas
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Funci√≥n para preguntar al usuario
const askQuestion = (question) => {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.toLowerCase().trim());
    });
  });
};

// Funci√≥n para ejecutar comandos
const runCommand = (command, description) => {
  console.log(`\n${colors.blue}üîç ${description}...${colors.reset}`);
  try {
    const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    console.log(`${colors.green}‚úÖ ${description} - EXITOSO${colors.reset}`);
    return { success: true, output };
  } catch (error) {
    console.log(`${colors.red}‚ùå ${description} - FALL√ì${colors.reset}`);
    if (error.stdout) console.log(error.stdout.toString());
    if (error.stderr) console.log(error.stderr.toString());
    return { success: false, error };
  }
};

// Funci√≥n principal de verificaci√≥n
async function prePushCheck() {
  console.log(`
${colors.cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                            ‚ïë
‚ïë     üõ°Ô∏è  VERIFICACI√ìN DE SEGURIDAD PRE-PUSH üõ°Ô∏è              ‚ïë
‚ïë                                                            ‚ïë
‚ïë     Evita romper producci√≥n verificando tu c√≥digo         ‚ïë
‚ïë                                                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}
`);

  const checks = [];
  let hasErrors = false;

  // 1. Verificar rama actual
  console.log(`\n${colors.magenta}üìç PASO 1: Verificando rama actual${colors.reset}`);
  try {
    const currentBranch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
    console.log(`   Rama actual: ${colors.yellow}${currentBranch}${colors.reset}`);
    
    if (currentBranch === 'main' || currentBranch === 'master') {
      console.log(`${colors.yellow}‚ö†Ô∏è  ADVERTENCIA: Est√°s en la rama principal${colors.reset}`);
      const answer = await askQuestion(`${colors.yellow}¬øRealmente quieres hacer push directamente a ${currentBranch}? (s/n): ${colors.reset}`);
      if (answer !== 's' && answer !== 'si' && answer !== 's√≠') {
        console.log(`${colors.green}‚úÖ Buena decisi√≥n. Crea una rama de desarrollo primero:${colors.reset}`);
        console.log(`   ${colors.cyan}git checkout -b feature/mi-nueva-funcionalidad${colors.reset}`);
        process.exit(1);
      }
    }
    checks.push({ name: 'Rama', status: '‚úÖ' });
  } catch (error) {
    checks.push({ name: 'Rama', status: '‚ùå' });
    hasErrors = true;
  }

  // 2. Verificar TypeScript
  console.log(`\n${colors.magenta}üìç PASO 2: Verificando TypeScript${colors.reset}`);
  const tsCheck = runCommand('npm run typecheck', 'Verificaci√≥n de tipos TypeScript');
  checks.push({ name: 'TypeScript', status: tsCheck.success ? '‚úÖ' : '‚ùå' });
  if (!tsCheck.success) hasErrors = true;

  // 3. Verificar Linting
  console.log(`\n${colors.magenta}üìç PASO 3: Verificando calidad del c√≥digo${colors.reset}`);
  const lintCheck = runCommand('npm run lint', 'Verificaci√≥n de linting');
  checks.push({ name: 'Linting', status: lintCheck.success ? '‚úÖ' : '‚ùå' });
  if (!lintCheck.success) hasErrors = true;

  // 4. Verificar Build
  console.log(`\n${colors.magenta}üìç PASO 4: Compilando proyecto (como en producci√≥n)${colors.reset}`);
  const buildCheck = runCommand('npm run build', 'Build de producci√≥n');
  checks.push({ name: 'Build', status: buildCheck.success ? '‚úÖ' : '‚ùå' });
  if (!buildCheck.success) hasErrors = true;

  // 5. Buscar console.logs peligrosos
  console.log(`\n${colors.magenta}üìç PASO 5: Buscando console.logs peligrosos${colors.reset}`);
  try {
    const dangerousPatterns = [
      'console.log.*password',
      'console.log.*token',
      'console.log.*secret',
      'console.log.*key',
      'console.log.*api',
      'console.log.*private'
    ];
    
    let foundDangerous = false;
    for (const pattern of dangerousPatterns) {
      try {
        execSync(`grep -r -i "${pattern}" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" ./app ./src`, { encoding: 'utf8' });
        foundDangerous = true;
        console.log(`${colors.red}   ‚ö†Ô∏è Encontrado: ${pattern}${colors.reset}`);
      } catch (e) {
        // No encontrado es bueno
      }
    }
    
    if (foundDangerous) {
      console.log(`${colors.red}‚ùå Se encontraron console.logs potencialmente peligrosos${colors.reset}`);
      checks.push({ name: 'Console.logs', status: '‚ö†Ô∏è' });
    } else {
      console.log(`${colors.green}‚úÖ No se encontraron console.logs peligrosos${colors.reset}`);
      checks.push({ name: 'Console.logs', status: '‚úÖ' });
    }
  } catch (error) {
    checks.push({ name: 'Console.logs', status: '‚ö†Ô∏è' });
  }

  // 6. Verificar archivos sensibles
  console.log(`\n${colors.magenta}üìç PASO 6: Verificando archivos sensibles${colors.reset}`);
  const sensitiveFiles = ['.env.local', '.env', 'secrets.json', 'credentials.json'];
  let foundSensitive = false;
  
  for (const file of sensitiveFiles) {
    if (fs.existsSync(path.join(process.cwd(), file))) {
      try {
        const gitCheck = execSync(`git check-ignore ${file}`, { encoding: 'utf8' });
        console.log(`${colors.green}   ‚úÖ ${file} est√° en .gitignore${colors.reset}`);
      } catch (e) {
        console.log(`${colors.red}   ‚ùå ${file} NO est√° en .gitignore - PELIGRO${colors.reset}`);
        foundSensitive = true;
      }
    }
  }
  
  checks.push({ name: 'Archivos sensibles', status: foundSensitive ? '‚ùå' : '‚úÖ' });
  if (foundSensitive) hasErrors = true;

  // RESUMEN FINAL
  console.log(`
${colors.cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     RESUMEN DE VERIFICACI√ìN                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}
`);

  checks.forEach(check => {
    console.log(`   ${check.status} ${check.name}`);
  });

  console.log('');

  if (hasErrors) {
    console.log(`
${colors.red}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                            ‚ïë
‚ïë     ‚ùå PUSH BLOQUEADO - HAY ERRORES QUE CORREGIR ‚ùå        ‚ïë
‚ïë                                                            ‚ïë
‚ïë     Por tu seguridad, no puedes hacer push hasta que      ‚ïë
‚ïë     corrijas los errores anteriores.                      ‚ïë
‚ïë                                                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}

${colors.yellow}üí° Sugerencias:${colors.reset}
   1. Revisa los errores de TypeScript: ${colors.cyan}npm run typecheck${colors.reset}
   2. Corrige problemas de linting: ${colors.cyan}npm run lint${colors.reset}
   3. Aseg√∫rate de que compila: ${colors.cyan}npm run build${colors.reset}
   4. Elimina console.logs sensibles
   5. Agrega archivos sensibles a .gitignore
`);
    rl.close();
    process.exit(1);
  } else {
    console.log(`
${colors.green}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                            ‚ïë
‚ïë     ‚úÖ TODAS LAS VERIFICACIONES PASARON ‚úÖ                 ‚ïë
‚ïë                                                            ‚ïë
‚ïë     Tu c√≥digo est√° listo para producci√≥n                  ‚ïë
‚ïë                                                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}
`);

    const answer = await askQuestion(`\n${colors.green}¬øContinuar con el push? (s/n): ${colors.reset}`);
    
    if (answer === 's' || answer === 'si' || answer === 's√≠') {
      console.log(`${colors.green}üöÄ Continuando con el push...${colors.reset}`);
      rl.close();
      process.exit(0);
    } else {
      console.log(`${colors.yellow}Push cancelado por el usuario${colors.reset}`);
      rl.close();
      process.exit(1);
    }
  }
}

// Ejecutar verificaci√≥n
prePushCheck().catch(error => {
  console.error(`${colors.red}Error en la verificaci√≥n:${colors.reset}`, error);
  rl.close();
  process.exit(1);
});