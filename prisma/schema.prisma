generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String
  phone                String?
  password             String?
  emailVerified        DateTime?
  phoneVerified        DateTime?
  preferredLanguage    String                 @default("es")
  timezone             String                 @default("Europe/Madrid")
  role                 String                 @default("HOST")
  status               String                 @default("PENDING")
  subscription         String                 @default("FREE")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  lastLoginAt          DateTime?
  avatar               String?
  companyName          String?
  createdBy            String?
  isActive             Boolean                @default(true)
  isAdmin              Boolean                @default(false)
  notes                String?
  adminLogs            AdminActivityLog[]
  assignedErrorReports ErrorReport[]          @relation("ErrorReportAssignee")
  invoices             Invoice[]
  mediaItems           MediaLibrary[]
  organization_members organization_members[]
  properties           Property[]
  propertySets         PropertySet[]
  trackingEvents       TrackingEvent[]        @relation("UserTrackingEvents")
  inspirationState     UserInspirationState?
  subscriptions        UserSubscription[]
  creator              User?                  @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers         User[]                 @relation("UserCreatedBy")
  moderatedComments    ZoneComment[]          @relation("CommentModerator")
  notifications        Notification[]

  @@map("users")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("email_verification_tokens")
}

model PropertySet {
  id                  String     @id @default(cuid())
  hostId              String
  name                String
  description         String
  street              String
  city                String
  state               String
  country             String
  postalCode          String
  type                String
  profileImage        String?
  hostContactName     String
  hostContactPhone    String
  hostContactEmail    String
  hostContactLanguage String     @default("es")
  hostContactPhoto    String?
  status              String     @default("DRAFT")
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  properties          Property[]
  host                User       @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@map("property_sets")
}

model Property {
  id                  String             @id @default(cuid())
  hostId              String
  organizationId      String?
  buildingId          String?
  propertySetId       String?
  name                String
  description         String
  street              String
  city                String
  state               String
  country             String
  postalCode          String
  type                String
  bedrooms            Int
  bathrooms           Int
  maxGuests           Int
  squareMeters        Int?
  defaultLanguages    Json               @default("[\"es\", \"en\"]")
  isPublished         Boolean            @default(false)
  profileImage        String?
  hostContactName     String
  hostContactPhone    String
  hostContactEmail    String
  hostContactLanguage String             @default("es")
  hostContactPhoto    String?
  status              String             @default("DRAFT")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  publishedAt         DateTime?
  slug                String?            @unique
  buildings           buildings?         @relation(fields: [buildingId], references: [id])
  host                User               @relation(fields: [hostId], references: [id], onDelete: Cascade)
  organizations       organizations?     @relation(fields: [organizationId], references: [id])
  propertySet         PropertySet?       @relation(fields: [propertySetId], references: [id])
  analytics           PropertyAnalytics?
  trackingEvents      TrackingEvent[]
  zones               Zone[]
  propertyRatings     PropertyRating[]
  reviews             Review[]

  @@index([slug])
  @@map("properties")
}

model Zone {
  id                  String          @id @default(cuid())
  propertyId          String?
  organizationId      String?
  buildingId          String?
  name                Json
  description         Json?
  icon                String
  color               String?
  order               Int             @default(0)
  qrCode              String          @unique
  accessCode          String          @unique
  whatsappEnabled     Boolean         @default(true)
  errorReportsEnabled Boolean         @default(true)
  commentsEnabled     Boolean         @default(true)
  ratingsEnabled      Boolean         @default(true)
  status              String          @default("DRAFT")
  isPublished         Boolean         @default(false)
  viewCount           Int             @default(0)
  lastViewedAt        DateTime?
  avgRating           Float           @default(0)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  publishedAt         DateTime?
  slug                String?
  errorReports        ErrorReport[]
  steps               Step[]
  trackingEvents      TrackingEvent[]
  analytics           ZoneAnalytics?
  comments            ZoneComment[]
  ratings             ZoneRating[]
  reviews             Review[]
  buildings           buildings?      @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  organizations       organizations?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  property            Property?       @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, slug])
  @@index([propertyId, status])
  @@index([qrCode])
  @@index([slug])
  @@map("zones")
}

model Step {
  id          String   @id @default(cuid())
  zoneId      String
  type        String
  title       Json
  content     Json
  order       Int      @default(0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  zones       Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([zoneId, order])
  @@map("steps")
}

model ZoneComment {
  id               String    @id @default(cuid())
  zoneId           String
  text             String
  rating           Int
  language         String
  guestName        String?
  guestCountry     String?
  guestLanguage    String
  status           String    @default("PENDING")
  moderatedAt      DateTime?
  moderatedBy      String?
  moderationReason String?
  helpfulVotes     Int       @default(0)
  reportedCount    Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  ipAddress        String?
  userAgent        String?
  moderator        User?     @relation("CommentModerator", fields: [moderatedBy], references: [id])
  zone             Zone      @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([zoneId, status])
  @@map("zone_comments")
}

model ErrorReport {
  id               String    @id @default(cuid())
  zoneId           String
  title            String
  description      String
  category         String
  severity         String
  affectedStep     String?
  userAgent        String?
  browserInfo      String?
  deviceType       String
  language         String
  reporterEmail    String?
  reporterLanguage String
  status           String    @default("PENDING")
  priority         String    @default("MEDIUM")
  assignedTo       String?
  hostResponse     String?
  resolutionNotes  String?
  resolvedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  assignee         User?     @relation("ErrorReportAssignee", fields: [assignedTo], references: [id])
  zone             Zone      @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@map("error_reports")
}

model ZoneRating {
  id                     String   @id @default(cuid())
  zoneId                 String
  overallRating          Int
  clarity                Int
  completeness           Int
  helpfulness            Int
  upToDate               Int
  feedback               String?
  improvementSuggestions String?
  language               String
  guestAgeRange          String?
  guestCountry           String?
  guestTravelType        String?
  createdAt              DateTime @default(now())
  ipAddress              String?
  visibleToHost          Boolean  @default(true)
  visibleToGuests        Boolean  @default(false)
  zone                   Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([zoneId, createdAt])
  @@map("zone_ratings")
}

model PropertyAnalytics {
  id                 String   @id @default(cuid())
  propertyId         String   @unique
  totalViews         Int      @default(0)
  uniqueVisitors     Int      @default(0)
  avgSessionDuration Int      @default(0)
  overallRating      Float    @default(0)
  totalRatings       Int      @default(0)
  improvementScore   Int      @default(0)
  whatsappClicks     Int      @default(0)
  errorReportsCount  Int      @default(0)
  commentsCount      Int      @default(0)
  lastCalculatedAt   DateTime @default(now())
  property           Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_analytics")
}

model DailyStats {
  id                 String   @id @default(cuid())
  propertyId         String
  date               DateTime
  views              Int      @default(0)
  uniqueVisitors     Int      @default(0)
  avgSessionDuration Int      @default(0)
  whatsappClicks     Int      @default(0)
  errorReports       Int      @default(0)
  newComments        Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([propertyId, date])
  @@index([propertyId, date])
  @@map("daily_stats")
}

model TrackingEvent {
  id         String   @id @default(cuid())
  type       String
  propertyId String
  zoneId     String?
  stepId     String?
  userId     String?
  sessionId  String?
  metadata   Json?
  timestamp  DateTime @default(now())
  userAgent  String?
  ipAddress  String?
  duration   Int?
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User?    @relation("UserTrackingEvents", fields: [userId], references: [id])
  zone       Zone?    @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([propertyId, type, timestamp])
  @@index([zoneId, type, timestamp])
  @@index([sessionId, timestamp])
  @@map("tracking_events")
}

model ZoneAnalytics {
  id                String   @id @default(cuid())
  zoneId            String   @unique
  totalViews        Int      @default(0)
  uniqueVisitors    Int      @default(0)
  avgTimeSpent      Int      @default(0)
  completionRate    Float    @default(0)
  avgStepsCompleted Float    @default(0)
  totalCompletions  Int      @default(0)
  avgRating         Float    @default(0)
  totalRatings      Int      @default(0)
  timeSavedMinutes  Int      @default(0)
  lastCalculatedAt  DateTime @default(now())
  zone              Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@map("zone_analytics")
}

model buildings {
  id             String        @id
  organizationId String
  name           String
  street         String
  city           String
  state          String
  country        String
  postalCode     String
  latitude       Float?
  longitude      Float?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  properties     Property[]
  zones          Zone[]
}

model organization_members {
  id             String        @id
  organizationId String
  userId         String
  role           String
  permissions    Json          @default("[]")
  joinedAt       DateTime      @default(now())
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  users          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model organizations {
  id                   String                 @id
  name                 String
  type                 String
  description          String?
  website              String?
  logo                 String?
  brandColorPrimary    String?
  brandColorSecondary  String?
  customDomain         String?                @unique
  defaultLanguages     Json                   @default("[\"es\", \"en\"]")
  timezone             String                 @default("Europe/Madrid")
  status               String                 @default("ACTIVE")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  buildings            buildings[]
  organization_members organization_members[]
  properties           Property[]
  zones                Zone[]
}

model UserInspirationState {
  id                   String   @id @default(cuid())
  userId               String   @unique
  dismissedZones       Json     @default("[]")
  createdZones         Json     @default("[]")
  lastShownInspiration String?
  showInspirations     Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_inspiration_states")
}

model SubscriptionPlan {
  id                 String             @id @default(cuid())
  name               String
  description        String?
  priceMonthly       Decimal            @map("price_monthly")
  priceYearly        Decimal?           @map("price_yearly")
  aiMessagesIncluded Int                @default(0) @map("ai_messages_included")
  maxProperties      Int                @default(1) @map("max_properties")
  features           Json               @default("[]")
  isActive           Boolean            @default(true) @map("is_active")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  subscriptions      UserSubscription[]

  @@map("subscription_plans")
}

model UserSubscription {
  id                 String           @id @default(cuid())
  userId             String           @map("user_id")
  planId             String           @map("plan_id")
  status             String
  customPrice        Decimal?         @map("custom_price")
  discountPercentage Decimal?         @default(0) @map("discount_percentage")
  discountReason     String?          @map("discount_reason")
  startDate          DateTime         @map("start_date")
  endDate            DateTime?        @map("end_date")
  notes              String?
  createdBy          String?          @map("created_by")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  invoices           Invoice[]
  plan               SubscriptionPlan @relation(fields: [planId], references: [id])
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_subscriptions")
}

model Invoice {
  id               String            @id @default(cuid())
  userId           String            @map("user_id")
  subscriptionId   String?           @map("subscription_id")
  invoiceNumber    String            @unique @map("invoice_number")
  amount           Decimal
  discountAmount   Decimal           @default(0) @map("discount_amount")
  finalAmount      Decimal           @map("final_amount")
  status           String
  paymentMethod    String?           @map("payment_method")
  paymentReference String?           @map("payment_reference")
  dueDate          DateTime          @map("due_date")
  paidDate         DateTime?         @map("paid_date")
  notes            String?
  createdBy        String?           @map("created_by")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  subscription     UserSubscription? @relation(fields: [subscriptionId], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model AdminActivityLog {
  id          String   @id @default(cuid())
  adminUserId String   @map("admin_user_id")
  action      String
  targetType  String?  @map("target_type")
  targetId    String?  @map("target_id")
  description String?
  metadata    Json?    @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  admin       User     @relation(fields: [adminUserId], references: [id], onDelete: Cascade)

  @@index([adminUserId, createdAt])
  @@map("admin_activity_log")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

model MediaLibrary {
  id           String    @id @default(cuid())
  userId       String
  type         String
  url          String
  thumbnailUrl String?
  filename     String
  originalName String
  mimeType     String
  size         Int
  duration     Int?
  width        Int?
  height       Int?
  hash         String
  tags         String[]  @default([])
  usageCount   Int       @default(0)
  isPublic     Boolean   @default(false)
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastUsedAt   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, hash])
  @@index([userId, type])
  @@index([hash])
  @@map("media_library")
}

model PropertyRating {
  id          String    @id @default(cuid())
  propertyId  String
  rating      Int       // 1-5 stars
  comment     String?
  guestId     String    // Anonymous guest identifier
  guestIp     String?
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime  @default(now())
  reviewedAt  DateTime?
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, status])
  @@index([guestId])
  @@map("property_ratings")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // RATING_RECEIVED, etc.
  title     String
  message   String
  data      Json?    // Additional data for the notification
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}

model Review {
  id              String    @id @default(cuid())
  propertyId      String
  zoneId          String?   // Optional - for zone-specific reviews
  rating          Int       // 1-5 stars
  comment         String?   // Optional comment
  userName        String    @default("Usuario anónimo")
  userEmail       String?   // Optional
  reviewType      String    // 'zone' or 'property'
  isPublic        Boolean   @default(false)
  isApproved      Boolean   @default(false) // Host approval for public reviews
  hostResponse    String?   // Host response to the review
  hostRespondedAt DateTime? // When host responded
  emailSent       Boolean   @default(false) // Track if email notification was sent
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  property        Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  zone            Zone?     @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([propertyId, isPublic])
  @@index([zoneId, isPublic])
  @@index([createdAt])
  @@index([isApproved, isPublic])
  @@map("reviews")
}
